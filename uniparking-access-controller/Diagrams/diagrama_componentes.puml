@startuml
title UniParking Component Diagram

interface "U-LPR Reader (externo)\n(Webhook)" as ULPR
interface "SSO/Portal Univ. (externo)\n(API de altas)" as PORTAL
interface "Pantalla de barrera\n(WebSocket/SSE)" as DISPLAY

package "UniParking (Microservicios)" {
  [API Gateway] as APIGW
  [Auth & Registry API] as AUTH
  [Access Controller] as ACCESS
  [Spot Allocator] as SPOT
  [Notifications] as NOTIF
  [Display Gateway] as DPGW
  [Admin UI (React)] as ADMIN
}

database "PostgreSQL\n(vehicles, permits,\nspots, sessions,\naccess_events)" as PG
queue "Redis\n(locks, TTL holds,\ncaches)" as REDIS
component "Prometheus\n(métricas)" as PROM
component "Grafana\n(dashboards)" as GRAF
component "OpenTelemetry\n(tracing)" as OTEL
queue "Broker (opcional)\nRabbitMQ/Kafka" as MQ

' Relaciones externas
ULPR --> ACCESS : POST /api/access/events\n(enter/exit)\nHMAC/API-Key
PORTAL --> AUTH : POST /api/vehicles\n(altas/bajas)
DISPLAY <-- DPGW : WS/SSE push\n(spot asignado)

' Flujos internos
APIGW --> AUTH : REST /vehicles,/permits
APIGW --> ACCESS : REST /access/events (webhook)
APIGW --> ADMIN : Servir UI estática

ACCESS --> SPOT : RPC/REST assignSpot()\nreleaseSpot()
SPOT --> PG : SQL (TX atómicas\nSELECT ... FOR UPDATE)
ACCESS --> PG : Insert access_event\nCrear/actualizar session
ACCESS --> DPGW : notify(plate, decision, spot)

AUTH --> PG : CRUD vehicles/permits
SPOT --> REDIS : Locks SETNX/TTL\n(hold expirations)

ACCESS --> NOTIF : sendSMS/email (opcional)
NOTIF --> (Proveedor SMS/Email) : API externa

' Observabilidad
ACCESS --> PROM : /metrics
SPOT --> PROM : /metrics
AUTH --> PROM : /metrics
PROM --> GRAF : scrape
(APIGW, AUTH, ACCESS, SPOT, NOTIF, DPGW) --> OTEL : traces

' Mensajería opcional
ACCESS --> MQ : publish access.decided
SPOT --> MQ : publish spot.assigned

' Admin UI
ADMIN --> APIGW : REST (CRUD, reportes)

@enduml
