@startuml
title UniParking Secuencia: Entrada (enter)

actor LPR as ULPR
participant "API Gateway" as GW
participant "Access Controller" as ACCESS
participant "Spot Allocator" as SPOT
database "PostgreSQL" as PG
participant "Display Gateway" as DPGW
participant "Notifications" as NOTIF

ULPR -> GW : POST /api/access/events {plate, type: enter}\nHMAC
GW -> ACCESS : forward enter-event

ACCESS -> PG : SELECT permit WHERE plate=?
PG --> ACCESS : permit (valid/invalid)

alt permit inválido o parking lleno
  ACCESS -> PG : INSERT access_event(decision=deny)
  ACCESS -> DPGW : push {plate, decision=deny, reason}
  ACCESS --> ULPR : 403 deny
else permitido
  ACCESS -> SPOT : assignSpot(plate)
  SPOT -> PG : TX: SELECT spot free FOR UPDATE SKIP LOCKED LIMIT 1
  SPOT -> PG : UPDATE spot status=held, hold_until=now()+TTL
  SPOT --> ACCESS : spot=B12
  ACCESS -> PG : INSERT access_event(decision=allow, spot=B12)\nINSERT parking_session(start, plate, spot)
  ACCESS -> DPGW : push {plate, decision=allow, spot=B12}
  ACCESS --> ULPR : 200 allow {spot: B12}
  par opcional
    ACCESS -> NOTIF : sendSMS(plate_owner, "Tu lugar es B12")
  end
end

' (Luego, al detectar paso de barrera o por confirmación)
ACCESS -> SPOT : confirmOccupy(spot=B12)
SPOT -> PG : UPDATE spot status=occupied, current_plate=plate

@enduml
